language: cpp
os: linux
compiler: gcc

addons:
  sonarcloud:
    organization: "simonfv"
  token:
    secure: "SuAcZG3RceUYiRSfVl66A/UeYcRDY3qWd1PAFqqBwiOpiBPf+6LtI1DDMMvDVbLgpyhCc+jpjZKhPK0dQub3OYfLtas8PZsC3viXFh6RCbr2HaLn6i6o8Iqbx8DEjWVzN8Tn97iYX8gAJEoowpyj5Cc1HbvldYQtqQSzgXoyQ49GFhnFT+9RX4T+Iicv+jg95GRNchD1BAJIcNVnODEuRai9b6JVUtaJ2ONEYz0Yf4gSn9xoZbdAVkDbQlpza92jHs2tyLcHGuroa5CvC6KMli21tV08JH/4OZF2ihk1e6XFCTPhzKh4LKSD6fNmKu15oH49FkzzUfQLAfcvVlQ0AS9rKsc25aZNc4okqi63i6s0PsU815AwTyuONQDLAAEolhT8sbAyP0TWG4sNbyqvistIC3tltHqMlsYRhJtnOVj8+9m3BhxzOOWVQojERSBXcxYP5AB+dTZKob1WiN6iN23cPAPFIPPScil0TcORsJbZEA83FIiXOMJ9xkwMyC0Nrmnljwy2kDbrB21kTQ+vC2aN9xj9RIM+6NI3F4Ws6LLLAKdgtSP5ZdN4S8yzvg5ZvJzAsGRBdntHZppjoQTdjiuvvVDON72spa4hIeCINmFnabna6iI+8DRdaidn9bGH9jYL0Eq5IM1zv4lG3daQR+2WSv+Be5CFtzODjVgbf4M="
  apt:
    packages:
      - gcc-4.8
      - g++-4.8
      
install:
  - if [ "$CXX" = "g++" ]; then export CXX="g++-4.8 -std=c++11 -DENABLE_REINFORCEMENT_LEARNING" CC="gcc-4.8"; fi
  # first we create a directory for the CMake binaries
  # first we create a directory for the CMake binaries
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
  # we use wget to fetch the cmake binaries
  - travis_retry wget --no-check-certificate https://cmake.org/files/v3.15/cmake-3.15.2-Linux-x86_64.tar.gz
  # extract the binaries; the output here is quite lengthy,
  # so we swallow it to not clutter up the travis console
  - tar -xvf cmake-3.15.2-Linux-x86_64.tar.gz > /dev/null
  - mv cmake-3.15.2-Linux-x86_64 cmake-install
  # add both the top-level directory and the bin directory from the archive
  # to the system PATH. By adding it to the front of the path we hide the
  # preinstalled CMake with our own.
  - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
  # don't forget to switch back to the main build directory once you are done
  - cd ${TRAVIS_BUILD_DIR}

script:
  # Adds the necesary libraries
  - sudo apt-get install libjsoncpp-dev
  - cd client
  - git clone https://github.com/gabime/spdlog.git
  - git clone https://github.com/whoshuu/cpr.git
  # Prepare the build system
  - mkdir build && cd build
  - cmake ..
  - cd ..
  # Wraps the compilation with the Build Wrapper to generate configuration (used
  # later by the SonarQube Scanner) into the "bw-output" folder
  - build-wrapper-linux-x86-64 --out-dir bw-output cmake --build client/build/
  # And finally run the SonarQube analysis - read the "sonar-project.properties"
  # file to see the specific configurations
  - sonar-scanner


cache:
  directories:
    - '$HOME/.sonar/cache'
