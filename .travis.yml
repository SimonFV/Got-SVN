language: cpp
os: linux
compiler: gcc

addons:
  sonarcloud:
    organization: "simonfv"
  token:
    secure: "OCFnsndonweK+nrR9L3mrl1Iyxw8DKxpEgQyHc8FyQEC6m+y9aVhn3wNUqif8lsT3XxqeZV4Pkfn2HGJSX4rlSz/a4tRcmhRjR7SJccJF012gFJY/WjLWQW28bEuyYgzFpA4IMhMmHsGI3frdBXc6sZbsKIpMXZYkzSkuxE3lnE9W8bupaQGnhfcOAmFDelkGjRJB/s2CzDz/5RAX4SkSCWZ7SskNuB9VrpZdZqQCh3d452d+o/uzdARGQJBYrfloKe8d8wTF4vQToxfr/jKapLZ5rDF6TQ1NgkJlhr/E2uaWfl0HQN3bSHo03OjFZGNEPPf4gn24pr/Psq5VEZMObe6WhhByS9XyzyWjQ0c2ewilgxyaQiGpqgDaAe3A2gFgO1t3T1iYo1CXDf6eTz9IXYS5R10s3k1vHVfXQnW2JoGivbt7Nu/ShOHO0IDHiDk9k7jr+H5ZTaVAVdmg1aYxbrcILM20c0hTnlzWc8sc9+8qDEkhRQSOvUpHIIYn0JE8ZmGwxifQbhQxi7UkKFblMEawUkX2pYXJFymeAVmD7nmscrYOTj00YsgNSqNzYp5Otv66AMKkW+hzx2zzaHYJqETux+/ya8YPJlzxjAKiKayS3KVdvpeVngUWcBXDnL5H6UmgjkxencU01ItCnVAyHAkBg5pR76g0f9xVMmJCrY="
  apt:
    packages:
      - gcc-4.8
      - g++-4.8
      
install:
  - if [ "$CXX" = "g++" ]; then export CXX="g++-4.8 -std=c++11 -DENABLE_REINFORCEMENT_LEARNING" CC="gcc-4.8"; fi
  - # first we create a directory for the CMake binaries
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
  # we use wget to fetch the cmake binaries
  - travis_retry wget --no-check-certificate https://github.com/Kitware/CMake/releases/download/v3.15.2/cmake-3.15.2.tar.gz
  # extract the binaries; the output here is quite lengthy,
  # so we swallow it to not clutter up the travis console
  - tar -zxvf cmake-3.15.2.tar.gz > /dev/null
  - cd cmake-3.15.2
  - ./bootstrap
  - make
  - sudo make install
  # add both the top-level directory and the bin directory from the archive
  # to the system PATH. By adding it to the front of the path we hide the
  # preinstalled CMake with our own.
  - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
  # don't forget to switch back to the main build directory once you are done
  - cd ${TRAVIS_BUILD_DIR}

script:
  # Adds the necesary libraries
  - sudo apt-get install libjsoncpp-dev
  - cd client
  - git clone https://github.com/gabime/spdlog.git
  - git clone https://github.com/whoshuu/cpr.git
  # Prepare the build system
  - mkdir build && cd build
  - cmake ..
  - cd ..
  # Wraps the compilation with the Build Wrapper to generate configuration (used
  # later by the SonarQube Scanner) into the "bw-output" folder
  - build-wrapper-linux-x86-64 --out-dir bw-output cmake --build build/
  # And finally run the SonarQube analysis - read the "sonar-project.properties"
  # file to see the specific configurations
  - sonar-scanner


cache:
  directories:
    - '$HOME/.sonar/cache'
